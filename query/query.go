package query

import (
	"bytes"
	"encoding/json"
	"net/http"
)

var httpHeader map[string][]string

func HttpQuery() *http.Response {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	// >>>>>>>> copy from curl-to-Go
	// fill Payload yourself
	// add these two lines and the end to this function
	// httpHeader = req.Header
	// //defer resp.Body.Close()

	type Payload struct {
		CourseType        string      `json:"courseType"`
		InsInstructorID   string      `json:"insInstructorId"`
		ReleasedSlotMonth string      `json:"releasedSlotMonth"`
		StageSubDesc      string      `json:"stageSubDesc"`
		SubVehicleType    interface{} `json:"subVehicleType"`
		SubStageSubNo     interface{} `json:"subStageSubNo"`
	}

	data := Payload{
		CourseType:        "3C",
		InsInstructorID:   "",
		ReleasedSlotMonth: "202212",
		StageSubDesc:      "Practical Lesson",
		SubVehicleType:    nil,
		SubStageSubNo:     nil,
	}

	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://abc.com/query", body)
	if err != nil {
		// handle err
	}

	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
	req.Header.Set("Authorization", "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJCQkRDIiwiTlJJQyI6IlM4OTU1OTYzRCIsImV4cCI6MTY3MTIwODM3MX0.F3ohqtybNfTHP-SJ4k0FdP6eA8Zo2OKOtynBRgC0QIo")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Content-Type", "application/json;charset=UTF-8")
	req.Header.Set("Cookie", "_ga=GA1.2.1721389846.1649773321; _gid=GA1.2.1060348268.1671122047; _gat_gtag_UA_154236860_1=1; bbdc-token=Bearer%20eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJCQkRDIiwiTlJJQyI6IlM4OTU1OTYzRCIsImV4cCI6MTY3MTIwODM3MX0.F3ohqtybNfTHP-SJ4k0FdP6eA8Zo2OKOtynBRgC0QIo")
	req.Header.Set("Jsessionid", "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJBQ0NfSUQiOiI5ODY4NDQiLCJpc3MiOiJCQkRDIiwiTlJJQyI6IlM4OTU1OTYzRCIsImV4cCI6MTMwNTIwMTQwNzkyfQ.4Km0x3ittrY20Q4afM0FOM4rbTt5gw-yAoFKJBk3kvY")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36")
	req.Header.Set("Sec-Ch-Ua", "\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Google Chrome\";v=\"108\"")
	req.Header.Set("Sec-Ch-Ua-Mobile", "?0")
	req.Header.Set("Sec-Ch-Ua-Platform", "\"macOS\"")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}

	httpHeader = req.Header
	//defer resp.Body.Close()
	return resp
}
